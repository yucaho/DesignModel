合成/聚合复用原则
        尽量使用合成/聚合，尽量不要使用类继承
   
   聚合表示一种弱的拥有关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分
 合成则是一种强的拥有关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样。 
    
优先使用对象的合成/聚合将有助于保持每个类被封装，并被集中在单个任务上，这样类和类继承层次
会保持较小规模，并且不太可能增长为不可控制的庞然大物。


迪米特法则(最少知识原则)：
    如果两个类不必批次直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个作用


单一职责原则： 就一个类而言，应该仅有一个引起它变化的原因

开放-封闭原则： 是说软件实体(类，模块，函数等等) 应该可以扩展，但是不可修改
        对于扩展是开放的，对于更改是封闭的   无论模块是多么的‘封闭’，都会存在一些无法对之封闭的变化。
        既然不可能完全封闭，设计人员必须对于他设计的模块应该对那种变化封闭做出选择。他必须县猜测出最有可能发生的变化种类，
        然后构造抽象来隔离那些变化。

        面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码

依赖倒转原则： 抽象不应该依赖细节，细节应该依赖于抽象，即针对接口编程，不要对实现编程
       高层模块不应该依赖底层模块。两个都应该依赖抽象
       抽象不应该依赖细节。细节应该依赖抽象

里氏代换原则： 一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别。
       也就是说， 子类型必须能够替换掉它们的父类型。



